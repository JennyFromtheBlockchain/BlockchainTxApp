Ideas
1) Filter out transactions which are merely there to inflate the tx rate of certain coins (e.g. trx) - Get tx which type is payment?
2) Should the app get all of the blcoks/transactions since the last block in db, as if it goes down, there could be hours of data missing
      or should the app always just get the latest? If we get all data, then how? Do we call each api repeatedly for the data
      (getting the next 20 blcoks, when we can for exampe)? This will take soem time and mean other coins are getting further out of
      date, or should it start a seperate thread as soon as it discovers a blockchains data is more than 1 block out of date?
3) Schedule when to call each api - e.g. coinmetricsCaller only needs to be called every 12 hours as the data is from the last 24 hours
4) Think about the coins table regarding a redesignn. Instead of coin ->* apiUrl, might be better to do apiUrl ->* coins... need further investigation

Bugs
1) Dogechain sometimes doesn't have the data for the next block, so returns an error. Deal with this error and try next block 
(if it's likely to have been mined) - example https://dogechain.info/api/v1/block/2490273
Respons object: 
data:
      { error: "undefined method `+' for nil:NilClass", success: 0 } } }

2) The app needs to ensure that if the last row in the database is not the block before the latest, it will go and get all from that last
block in the db to the latest (within reason) - this happens in minergate_api_caller.js with xmr
3) Deal with error from coinexplorer
data:
      { success: false,
        result: [],
        error: 'Too many requests. Slow down your queries.' } } }

4) vechain api isn't retrieiving new blocks, likely not active anymore. Add vechain (from messari.io?)
5) i should only need one call to the db to insert something, figure out how to insert and ignore if already exists
